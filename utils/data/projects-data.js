export const projectsData = [
  {
    id: 1,
    name: 'Godot Point-and-Click Visual Novel Game',
    description: `My first video game: a visual novel with point-and-click elements, developed in Godot. The game features a retro aesthetic achieved through a fake pixel art post-processing shader and a recoloring inspired by the Game Boy era. I worked on an ambient music mixing system, custom shaders, a dialogue system, and a synchronous scene transition system for a smooth narrative experience.`,
    tools: ['Godot', 'GDScript', 'GLSL', 'Aseprite', 'Tiled'],
    role: 'Game Developer',
    active: true,
    status: 'in development',
    code: 'https://figurophobia.itch.io/mystery-marenport',
    demo: '',
    images: ['/image/GameScreenshots/Chair.jpeg', '/image/GameScreenshots/Silla.jpeg', '/image/GameScreenshots/TV.jpeg', '/image/GameScreenshots/Bottle.jpeg', '/image/GameScreenshots/Bottle2.jpeg'],
  },
  {
    id: 2,
    name: 'Personal NAS Server Automation',
    description: `I built and maintain a personal NAS server running on headless Debian, with all services automated in Docker containers managed via Portainer. The server is connected to a 4TB hard drive which I use as a private cloud. It also features an automated download assistant and a dedicated Plex container for streaming movies and series, including content dumped from Blu-ray discs.`,
    tools: ['Debian', 'Docker', 'Portainer', 'Plex', 'SSH'],
    role: 'Server & Automation Engineer',
    active: true,
    status: 'maintained',
    code: '',
    demo: '',
    images: [],
  },
  {
    id: 3,
    name: 'Milk Video Converter',
    description: `A small GUI tool that splits a video into frames and applies a custom recoloring filter. The filter includes options for pointillism and compression to achieve a unique retro effect by reducing image quality in the recoloring process. Once the filter has been applied to all frames, the frames are reassembled into a video. Developed and released with PyInstaller. I am currently working on exporting the filter to a GLSL shader for optimization, and exploring ways to port it to a web page.`,
    tools: ['Python', 'PyInstaller', 'OpenCV', 'GLSL'],
    role: 'Developer',
    active: true,
    status: 'released',
    code: 'https://github.com/figurophobia/Milk-Video-Converter',
    demo: '',
    images: [],
  },
  {
    id: 4,
    name: 'Monopoly Java (CLI)',
    description: `A complete Monopoly game implemented in Java as a command-line interface (CLI) application, designed as a learning project to master the language. The game features multiple avatars with distinct movement mechanics, various card types, a wide range of unique board spaces, a fully reprogrammable board, and even rigged dice. Every aspect was built from scratch to deepen my understanding of Java and object-oriented programming.`,
    tools: ['Java', 'CLI', 'Object-Oriented Programming'],
    role: 'Java Developer',
    active: false,
    status: 'archived',
    code: 'https://github.com/figurophobia/Monopoly-Java',
    demo: '',
    images: [],
  },
  {
    id: 5,
    name: 'Solar System in OpenGL 1.2',
    description: `A solar system simulation developed in C using the OpenGL 1.2 pipeline. Features include free camera movement, orthogonal and perspective views, multiple types of lighting, and a telescope mode that tracks different celestial bodies.`,
    tools: ['C', 'OpenGL 1.2'],
    role: 'Graphics Programmer',
    active: false,
    status: 'archived',
    code: 'https://github.com/figurophobia/SolarSystemOGL1.2',
    demo: '',
    images: [],
  }
];